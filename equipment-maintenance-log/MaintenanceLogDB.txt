-- Create the database if it doesn't exist
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'MaintenanceLogDB')
BEGIN
    CREATE DATABASE MaintenanceLogDB;
END;
GO

USE MaintenanceLogDB;
GO

-- Create the table for maintenance records
IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='MaintenanceRecords' and xtype='U')
BEGIN
    -- The table below stores one maintenance activity per row.
    -- Columns:
    --   Id            : unique identifier for the record (auto-incrementing)
    --   EquipmentName : short name of the equipment (up to 100 chars)
    --   Description   : detailed notes about the maintenance (unlimited length)
    --   MaintenanceDate: when the maintenance occurred (high precision)
    --   PerformedBy   : technician or person who performed the work
    --   IsCompleted   : boolean flag (0 = not completed, 1 = completed)
    CREATE TABLE MaintenanceRecords (
        Id INT PRIMARY KEY IDENTITY(1,1),
        EquipmentName NVARCHAR(100) NOT NULL,
        Description NVARCHAR(MAX) NOT NULL,
        MaintenanceDate DATETIME2 NOT NULL,
        PerformedBy NVARCHAR(100) NOT NULL,
        IsCompleted BIT NOT NULL DEFAULT 0
    );
END;
GO

--- Stored Procedures for CRUD Operations ---

-- GET ALL RECORDS
CREATE OR ALTER PROCEDURE sp_GetAllMaintenanceRecords
AS
BEGIN
    -- Returns all rows from the MaintenanceRecords table.
    -- Useful for building lists or reports.
    -- The results are ordered by MaintenanceDate descending (newest first).
    SELECT Id, EquipmentName, Description, MaintenanceDate, PerformedBy, IsCompleted 
    FROM MaintenanceRecords
    ORDER BY MaintenanceDate DESC;
END;
GO

-- GET RECORD BY ID
CREATE OR ALTER PROCEDURE sp_GetMaintenanceRecordById
    @Id INT
AS
BEGIN
    -- Returns a single maintenance record identified by the primary key @Id.
    -- Input: @Id (INT) - the Id value of the row you want.
    -- Output: the matching row, or no rows if the Id does not exist.
    SELECT Id, EquipmentName, Description, MaintenanceDate, PerformedBy, IsCompleted 
    FROM MaintenanceRecords 
    WHERE Id = @Id;
END;
GO

-- CREATE NEW RECORD
CREATE OR ALTER PROCEDURE sp_CreateMaintenanceRecord
    @EquipmentName NVARCHAR(100),
    @Description NVARCHAR(MAX),
    @MaintenanceDate DATETIME2,
    @PerformedBy NVARCHAR(100),
    @IsCompleted BIT
AS
BEGIN
    -- Inserts a new maintenance record using the provided parameters.
    -- Note: this procedure does not return the new Id. If you need the Id,
    -- consider using SCOPE_IDENTITY() after the insert or returning it explicitly.
    INSERT INTO MaintenanceRecords (EquipmentName, Description, MaintenanceDate, PerformedBy, IsCompleted)
    VALUES (@EquipmentName, @Description, @MaintenanceDate, @PerformedBy, @IsCompleted);
END;
GO

-- UPDATE RECORD
CREATE OR ALTER PROCEDURE sp_UpdateMaintenanceRecord
    @Id INT,
    @EquipmentName NVARCHAR(100),
    @Description NVARCHAR(MAX),
    @MaintenanceDate DATETIME2,
    @PerformedBy NVARCHAR(100),
    @IsCompleted BIT
AS
BEGIN
    -- Updates the row with the given @Id. All columns are updated to the
    -- supplied parameter values. If @Id does not exist, no rows are changed.
    UPDATE MaintenanceRecords
    SET 
        EquipmentName = @EquipmentName,
        Description = @Description,
        MaintenanceDate = @MaintenanceDate,
        PerformedBy = @PerformedBy,
        IsCompleted = @IsCompleted
    WHERE Id = @Id;
END;
GO

-- DELETE RECORD
CREATE OR ALTER PROCEDURE sp_DeleteMaintenanceRecord
    @Id INT
AS
BEGIN
    -- Deletes the record with the specified @Id. This is irreversible, so
    -- use with caution. You might prefer to soft-delete (add a flag) in real apps.
    DELETE FROM MaintenanceRecords 
    WHERE Id = @Id;
END;
GO